name: 'Deploy Kubernetes'
description: 'Setup kubectl and perform deployment to the kubernetes.'

inputs:
  base64_kube_config:
    description: 'Base64 encoded kubeconfig for kubectl'
    required: true
  image:
    description: 'Docker image to deploy'
    required: true
  tag:
    description: 'Docker image tag to deploy'
    required: true
  name:
    description: 'Kubernetes name to deploy to'
    required: true
  namespace:
    description: 'Kubernetes namespace to deploy to'
    required: true
  container_port:
    description: 'Application exposed container port'
    required: true
  manifest:
    description: 'Optional path to Kubernetes manifest file'
    required: false
    default: ''


runs:
  using: 'composite'
  steps:

    - name: Setup Kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ inputs.base64_kube_config }}

- name: Deploy to Kubernetes
  shell: bash
  run: |
    if [[ -n "${{ inputs.manifest }}" ]]; then
      echo "Using provided manifest file: ${{ inputs.manifest }}"
      kubectl apply -f "${{ inputs.manifest }}"
    else
      echo "Generating deployment YAML from inputs"
      cat <<EOF > deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ${{ inputs.namespace }}
  name: ${{ inputs.name }}
  labels:
    app: ${{ inputs.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${{ inputs.name }}
  template:
    metadata:
      labels:
        app: ${{ inputs.name }}
    spec:
      imagePullSecrets:
        - name: dcr-registry
      containers:
        - name: ${{ inputs.name }}
          image: dcr.oskadev.com/${{ inputs.image }}:${{ inputs.tag }}
          imagePullPolicy: 'Always'
          ports:
            - containerPort: ${{ inputs.container_port }}
EOF

if [[ -n "${{ inputs.config_ref }}" ]]; then
  cat <<EOF >> deployment.yml
          envFrom:
            - configMapRef:
                name: ${{ inputs.config_ref }}
EOF
fi

cat <<EOF >> deployment.yml
---
apiVersion: v1
kind: Service
metadata:
  namespace: ${{ inputs.namespace }}
  name: ${{ inputs.name }}
spec:
  selector:
    app: ${{ inputs.name }}
  ports:
    - protocol: TCP
      port: 80
      targetPort: ${{ inputs.container_port }}
EOF
      kubectl apply -f deployment.yml
    fi