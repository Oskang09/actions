name: 'Deploy Kubernetes'
description: 'Setup kubectl and perform deployment to the kubernetes.'

inputs:
  base64_kube_config:
    description: 'Base64 encoded kubeconfig for kubectl'
    required: true
  image:
    description: 'Docker image to deploy'
    required: true
  tag:
    description: 'Docker image tag to deploy'
    required: true
  name:
    description: 'Kubernetes name to deploy to'
    required: true
  namespace:
    description: 'Kubernetes namespace to deploy to'
    required: true
  container_port:
    description: 'Application exposed container port'
    required: true
  config_ref:
    description: 'ConfigMap reference (optional)'
    required: false
    default: ''
  manifest:
    description: 'Optional path to Kubernetes manifest file'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Setup Kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ inputs.base64_kube_config }}

    - name: Deploy to Kubernetes
      shell: bash
      env:
        MANIFEST: ${{ inputs.manifest }}
        NAMESPACE: ${{ inputs.namespace }}
        NAME: ${{ inputs.name }}
        IMAGE: ${{ inputs.image }}
        TAG: ${{ inputs.tag }}
        CONTAINER_PORT: ${{ inputs.container_port }}
        CONFIG_REF: ${{ inputs.config_ref }}
      run: |
        if [[ -n "$MANIFEST" ]]; then
          echo "Using provided manifest file: $MANIFEST"
          kubectl apply -f "$MANIFEST"
        else
          echo "Generating deployment YAML from inputs" > deployment.yml
          printf '%s\n' \
"apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $NAMESPACE
  name: $NAME
  labels:
    app: $NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $NAME
  template:
    metadata:
      labels:
        app: $NAME
    spec:
      imagePullSecrets:
        - name: dcr-registry
      containers:
        - name: $NAME
          image: dcr.oskadev.com/$IMAGE:$TAG
          imagePullPolicy: Always
          ports:
            - containerPort: $CONTAINER_PORT" >> deployment.yml

          if [[ -n "$CONFIG_REF" ]]; then
            printf '%s\n' \
"          envFrom:
            - configMapRef:
                name: $CONFIG_REF" >> deployment.yml
          fi

          printf '%s\n' \
"---
apiVersion: v1
kind: Service
metadata:
  namespace: $NAMESPACE
  name: $NAME
spec:
  selector:
    app: $NAME
  ports:
    - protocol: TCP
      port: 80
      targetPort: $CONTAINER_PORT" >> deployment.yml

          kubectl apply -f deployment.yml
        fi
